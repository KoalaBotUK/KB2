openapi: 3.1.0
info:
  title: KoalaBot
  version: 2.0.0-alpha.1
  description: |-
    This is the KoalaBot API. This is allowed to be used by anyone who wishes to do so, and is also used by the KoalaBot dashboard.
  termsOfService: https://drive.google.com/drive/folders/16sw768rXd7c52FWeXrqHt0tTz3FoqN_O?usp=sharing
  contact:
    email: drapj002@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/license/mit
externalDocs:
  description: koalabot.uk
  url: https://koalabot.uk
servers:
  - url: http://localhost:9000/lambda-url/api/
    description: Local
  - url: https://api.dev.koalabot.uk
    description: Development
  - url: https://koalabot.uk
    description: Production
tags:
  - name: users
    description: Basic user information
  - name: guild
    description: Basic guild information
paths:
  /users:
    post:
      tags:
        - users
      summary: Finds or creates a user while updating from discord.
      description: Finds or creates a user while updating from discord.
      operationId: findOrCreateUser
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
            - guilds
    get:
      tags:
        - users
      summary: Finds all users.
      description: Finds all users.
      operationId: findUsers
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/LimitParameter'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Finds user by ID.
      description: Finds user by ID.
      operationId: findUserById
      parameters:
        - name: user_id
          in: path
          schema:
            $ref: '#/components/schemas/DiscordSnowflake'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Guild not found.
          content: { }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
  /users/{user_id}/links:
    post:
      tags:
        - users
      summary: Links an email to a user.
      description: Links an email to a user.
      operationId: userLink
      parameters:
        - name: user_id
          in: path
          schema:
            type: integer
            format: int64
            example: 308994132968210433
          required: true
      requestBody:
        $ref: '#/components/requestBodies/LinkRequest'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
  /users/{user_id}/links/{link_address}:
    delete:
      tags:
        - users
      summary: Unlinks an email from a user.
      description: Unlinks an email from a user.
      operationId: userUnlink
      parameters:
        - name: user_id
          in: path
          schema:
            type: integer
            format: int64
            example: 308994132968210433
          required: true
        - name: link_address
          in: path
          schema:
            type: string
            description: URL encoded link address
            example: jon.doe%40example.com
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
  /guilds:
    post:
      tags:
        - guilds
      summary: Finds or creates a guild, updating from discord.
      description: Finds or creates a user while updating from discord.
      operationId: FindOrCreateGuild
      requestBody:
        $ref: '#/components/requestBodies/GuildRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guild'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
            - guilds
    get:
      tags:
        - guilds
      summary: Finds all guilds.
      description: Finds all guilds.
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/LimitParameter'
      operationId: FindGuilds
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guild'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
            - guilds
  /guilds/{guild_id}:
    get:
      tags:
        - guilds
      summary: Finds guild by ID.
      description: Finds guild by ID.
      operationId: FindGuildById
      parameters:
        - name: guild_id
          in: path
          schema:
            $ref: '#/components/schemas/DiscordSnowflake'
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guild'
        '404':
          description: Guild not found.
          content: { }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
            - guilds
    put:
      tags:
        - guilds
      summary: Update guild by ID.
      description: Update guild by ID.
      operationId: UpdateGuildById
      parameters:
        - name: guild_id
          in: path
          schema:
            $ref: '#/components/schemas/DiscordSnowflake'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guild'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guild'
        '404':
          description: Guild not found.
          content: { }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - discord_auth:
            - identify
            - guilds
components:
  parameters:
    PageParameter:
      name: page
      in: query
      description: The page number to retrieve
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    LimitParameter:
      name: limit
      in: query
      description: The number of items to return per page
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
  schemas:
    DiscordSnowflake:
      type: integer
      format: int64
      example: 80351110224678912
    LinkGuild:
      type: object
      properties:
        guild_id:
          $ref: '#/components/schemas/DiscordSnowflake'
        enabled:
          type: boolean
          example: true
    Link:
      type: object
      properties:
        link_address:
          type: string
          description: Email address
          example: john.doe@example.com
        linked_at:
          type: integer
          description: Epoch time the account was linked
          example: 1754799631
          format: int64
        enabled:
          type: boolean
          example: true

    TokenOrigin:
      type: string
      example: MICROSOFT
      enum:
        - DISCORD
        - MICROSOFT
        - GOOGLE
        - EMAIL

    User:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/DiscordSnowflake'
        username:
          type: string
          example: johndoe
        global_name:
          type: string
          example: John Doe
        avatar:
          type: string
          example: 8342729096ea3675442027381ff50dfe
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        link_guilds:
          type: array
          items:
            $ref: '#/components/schemas/LinkGuild'

    VerifyRole:
      type: object
      properties:
        role_id:
          $ref: '#/components/schemas/DiscordSnowflake'
        pattern:
          type: string
          example: '@example.com$'


    Verify:
      type: object
      properties:
        role_mappings:
          type: array
          items:
            $ref: '#/components/schemas/VerifyRole'
        user_links:
          # Map of user id to array of link addresses
          type: object
          description: Map of user id to array of link addresses
          example:
            '308994132968210433': [ { 'link_address': 'john.doe@example.com', 'linked_at': 1754799631 }, { 'link_address': 'johnny.doe@example.com', 'linked_at': 1754799651 } ]
            '308994132968210434': [ { 'link_address': 'jane.doe@example.com', 'linked_at': 1754799612 } ]
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Link'
    Guild:
      type: object
      properties:
        guild_id:
          $ref: '#/components/schemas/DiscordSnowflake'
        verify:
          $ref: '#/components/schemas/Verify'
        name:
          type: string
          example: Example Guild
        icon:
          type: string
          example: 8342729096ea3675442027381ff50dfe
        user_links:
          # Map of user id to array of link addresses
          type: object
          description: Map of user id to array of link addresses
          example:
            '308994132968210433': [ { 'link_address': 'john.doe@example.com', 'linked_at': 1754799631, enabled: true }]
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Link'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    UserRequest:
      description: User object that needs to be added to the store
      content:
        application/json:
          schema:
            type: object
            properties:
              user_id:
                $ref: '#/components/schemas/DiscordSnowflake'
    LinkRequest:
      description: Link a new address to a user
      content:
        application/json:
          schema:
            type: object
            properties:
              origin:
                $ref: '#/components/schemas/TokenOrigin'
              token:
                type: string
                example: mytoken1234
    GuildRequest:
      description: Guild object that needs to be added to the store
      content:
        application/json:
          schema:
            type: object
            properties:
              guild_id:
                $ref: '#/components/schemas/DiscordSnowflake'
  securitySchemes:
    discord_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://discord.com/oauth2/authorize?response_type=code
          scopes:
            identify: Basic information about a user (without email)
            email: Allows identify to view to a user's email address
            guilds: Basic information about all of a user's guilds